// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InstallerStack Stack(installer):  Snapshot Test 1`] = `
Object {
  "Conditions": Object {
    "IsCommercialCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AWS::Partition",
        },
        "aws",
      ],
    },
    "SolutionHelperAnonymousDataToAWS62E4FDE2": Object {
      "Fn::Equals": Array [
        Object {
          "Fn::FindInMap": Array [
            "SolutionHelperAnonymousData14B64A81",
            "SendAnonymousData",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "UseCodeCommitCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "codecommit",
      ],
    },
    "UseGitHubCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "github",
      ],
    },
  },
  "Mappings": Object {
    "GlobalRegionMap": Object {
      "aws": Object {
        "regionName": "us-east-1",
      },
      "aws-cn": Object {
        "regionName": "cn-northwest-1",
      },
      "aws-iso": Object {
        "regionName": "us-iso-east-1",
      },
      "aws-iso-b": Object {
        "regionName": "us-isob-east-1",
      },
      "aws-us-gov": Object {
        "regionName": "us-gov-west-1",
      },
    },
    "SolutionHelperAnonymousData14B64A81": Object {
      "SendAnonymousData": Object {
        "Data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Git Repository Configuration",
          },
          "Parameters": Array [
            "RepositorySource",
            "RepositoryOwner",
            "RepositoryName",
            "RepositoryBranchName",
          ],
        },
        Object {
          "Label": Object {
            "default": "Pipeline Configuration",
          },
          "Parameters": Array [
            "EnableApprovalStage",
            "ApprovalStageNotifyEmailList",
          ],
        },
        Object {
          "Label": Object {
            "default": "Mandatory Accounts Configuration",
          },
          "Parameters": Array [
            "ManagementAccountEmail",
            "LogArchiveAccountEmail",
            "AuditAccountEmail",
          ],
        },
        Object {
          "Label": Object {
            "default": "Environment Configuration",
          },
          "Parameters": Array [
            "ControlTowerEnabled",
          ],
        },
      ],
      "ParameterLabels": Object {
        "ApprovalStageNotifyEmailList": Object {
          "default": "Manual Approval Stage notification email list",
        },
        "AuditAccountEmail": Object {
          "default": "Audit Account Email",
        },
        "ControlTowerEnabled": Object {
          "default": "Control Tower Environment",
        },
        "EnableApprovalStage": Object {
          "default": "Enable Approval Stage",
        },
        "LogArchiveAccountEmail": Object {
          "default": "Log Archive Account Email",
        },
        "ManagementAccountEmail": Object {
          "default": "Management Account Email",
        },
        "RepositoryBranchName": Object {
          "default": "Branch Name",
        },
        "RepositoryName": Object {
          "default": "Repository Name",
        },
        "RepositoryOwner": Object {
          "default": "Repository Owner",
        },
        "RepositorySource": Object {
          "default": "Source",
        },
      },
    },
  },
  "Parameters": Object {
    "ApprovalStageNotifyEmailList": Object {
      "Description": "Provide comma(,) separated list of email ids to receive manual approval stage notification email",
      "Type": "CommaDelimitedList",
    },
    "AuditAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The security audit account (also referred to as the audit account)",
      "Type": "String",
    },
    "ControlTowerEnabled": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes if you deploying to a Control Tower environment.  Select no if using just Organizations",
      "Type": "String",
    },
    "EnableApprovalStage": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes to add a Manual Approval stage to accelerator pipeline",
      "Type": "String",
    },
    "LogArchiveAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The log archive account email",
      "Type": "String",
    },
    "ManagementAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The management (primary) account email",
      "Type": "String",
    },
    "RepositoryBranchName": Object {
      "AllowedPattern": ".+",
      "ConstraintDescription": "The repository branch name must not be empty",
      "Default": "release/v1.3.0",
      "Description": "The name of the git branch to use for installation. To determine the branch name, navigate to the Landing Zone Accelerator GitHub branches page and choose the release branch you would like to deploy. Release branch names will align with the semantic versioning of our GitHub releases. New release branches will be available as the open source project is updated with new features.",
      "Type": "String",
    },
    "RepositoryName": Object {
      "Default": "landing-zone-accelerator-on-aws",
      "Description": "The name of the git repository hosting the accelerator code",
      "Type": "String",
    },
    "RepositoryOwner": Object {
      "Default": "awslabs",
      "Description": "The owner of the repository containing the accelerator code. (GitHub Only)",
      "Type": "String",
    },
    "RepositorySource": Object {
      "AllowedValues": Array [
        "github",
        "codecommit",
      ],
      "Default": "github",
      "Description": "Specify the git host",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AcceleratorManagementKmsArnParameter1E6975BF": Object {
      "Properties": Object {
        "Name": "/accelerator/installer/kms/key-arn",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "CodeCommitPipeline2208527B": Object {
      "Condition": "UseCodeCommitCondition",
      "DependsOn": Array [
        "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "CodeCommitPipelineRole5C35E76C",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": "AWSAccelerator-Installer",
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "CodeCommitPipelineRole5C35E76C",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineRole5C35E76C",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CodeCommitPipelineRole5C35E76C": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CodeCommitPipelineRoleDefaultPolicyDE8B332B": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineRole5C35E76C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineRole5C35E76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codecommit:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    Object {
                      "Ref": "RepositoryName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipeline7B79E906": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "GitHubPipelineRoleDefaultPolicyD82457D6",
        "GitHubPipelineRole6F4DEF1B",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": "AWSAccelerator-Installer",
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "GitHubPipelineRole6F4DEF1B",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1",
                },
                "Configuration": Object {
                  "Branch": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "OAuthToken": "{{resolve:secretsmanager:accelerator/github-token:SecretString:::}}",
                  "Owner": Object {
                    "Ref": "RepositoryOwner",
                  },
                  "PollForSourceChanges": false,
                  "Repo": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "GitHubPipelineRole6F4DEF1B": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipelineRoleDefaultPolicyD82457D6": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GitHubPipelineRole6F4DEF1B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubPipelineRoleDefaultPolicyD82457D6",
        "Roles": Array [
          Object {
            "Ref": "GitHubPipelineRole6F4DEF1B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerAccessLogsBucket647700E9": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-S1",
              "reason": "AccessLogsBucket has server access logs disabled till the task for access logging completed.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This is an access logging bucket.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "aws-accelerator-s3-logs-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRuleaws-accelerator-s3-logs-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerAccessLogsBucketName4F700F48": Object {
      "Properties": Object {
        "Name": "/accelerator/installer-access-logs-bucket-name",
        "Type": "String",
        "Value": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "InstallerAccessLogsBucketPolicy20D4E285": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "InstallerAccessLogsBucket647700E9",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "InstallerAccessLogsBucket647700E9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "InstallerAdminRole7DEE4AC8": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AdministratorAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "InstallerAdminRoleDefaultPolicy7EEE1AAB": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    Object {
                      "Ref": "InstallerProject879FF821",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InstallerAdminRoleDefaultPolicy7EEE1AAB",
        "Roles": Array [
          Object {
            "Ref": "InstallerAdminRole7DEE4AC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerKey2A6A8C6D": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F76",
              "reason": "KMS key using * principal with added arn condition",
            },
          ],
        },
      },
      "Properties": Object {
        "Description": "AWS Accelerator Management Account Kms Key",
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:PrincipalARN": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":role/AWSAccelerator-*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "Allow Accelerator Role to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow SNS service to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "logs.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow Cloudwatch Logs service to use the encryption key",
            },
            Object {
              "Fn::If": Array [
                "IsCommercialCondition",
                Object {
                  "Action": Array [
                    "kms:GenerateDataKey*",
                    "kms:Decrypt",
                  ],
                  "Condition": Object {
                    "StringEquals": Object {
                      "kms:ViaService": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "sns.",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ".amazonaws.com",
                          ],
                        ],
                      },
                    },
                  },
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "codestar-notifications.amazonaws.com",
                  },
                  "Resource": "*",
                  "Sid": "KMS key access to codestar-notifications",
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerKeyAliasD5C174F0": Object {
      "Properties": Object {
        "AliasName": "alias/accelerator/installer/kms/key",
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstallerProject879FF821": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CB3",
              "reason": "Project requires access to the Docker daemon.",
            },
          ],
        },
      },
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_MEDIUM",
          "EnvironmentVariables": Array [
            Object {
              "Name": "NODE_OPTIONS",
              "Type": "PLAINTEXT",
              "Value": "--max_old_space_size=4096",
            },
            Object {
              "Name": "CDK_NEW_BOOTSTRAP",
              "Type": "PLAINTEXT",
              "Value": "1",
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_SOURCE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositorySource",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_OWNER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryOwner",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryName",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_BRANCH_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryBranchName",
              },
            },
            Object {
              "Name": "ACCELERATOR_ENABLE_APPROVAL_STAGE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "EnableApprovalStage",
              },
            },
            Object {
              "Name": "APPROVAL_STAGE_NOTIFY_EMAIL_LIST",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Fn::Join": Array [
                  ",",
                  Object {
                    "Ref": "ApprovalStageNotifyEmailList",
                  },
                ],
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountEmail",
              },
            },
            Object {
              "Name": "LOG_ARCHIVE_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "LogArchiveAccountEmail",
              },
            },
            Object {
              "Name": "AUDIT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AuditAccountEmail",
              },
            },
            Object {
              "Name": "CONTROL_TOWER_ENABLED",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ControlTowerEnabled",
              },
            },
            Object {
              "Name": "ENABLE_TESTER",
              "Type": "PLAINTEXT",
              "Value": "true",
            },
            Object {
              "Name": "MANAGEMENT_CROSS_ACCOUNT_ROLE_NAME",
              "Type": "PLAINTEXT",
              "Value": "AWSControlTowerExecution",
            },
          ],
          "Image": "aws/codebuild/standard:5.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "Name": "AWSAccelerator-InstallerProject",
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "InstallerAdminRole7DEE4AC8",
            "Arn",
          ],
        },
        "Source": Object {
          "BuildSpec": Object {
            "Fn::Join": Array [
              "",
              Array [
                "version: \\"0.2\\"
phases:
  install:
    runtime-versions:
      nodejs: 14
  pre_build:
    commands:
      - ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"no\\"
      - if [ ! -z \\"$MANAGEMENT_ACCOUNT_ID\\" ] && [ ! -z \\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" ]; then ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"yes\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then BOOTSTRAPPED_HOME=\\"no\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then BOOTSTRAPPED_GLOBAL=\\"no\\"; fi
  build:
    commands:
      - cd source
      - |-
        if [ \\"",
                Object {
                  "Ref": "AWS::Partition",
                },
                "\\" = \\"aws-cn\\" ]; then
                          sed -i \\"s#registry.yarnpkg.com#registry.npmmirror.com#g\\" yarn.lock;
                          yarn config set registry https://registry.npmmirror.com
                       fi
      - yarn install
      - yarn lerna link
      - yarn build
      - cd packages/@aws-accelerator/installer
      - if [ \\"$BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi
      - if [ \\"$BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi
      - |-
        if [ $ENABLE_EXTERNAL_PIPELINE_ACCOUNT = \\"yes\\" ]; then
                          export $(printf \\"AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s\\" $(aws sts assume-role --role-arn arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::\\"$MANAGEMENT_ACCOUNT_ID\\":role/\\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" --role-session-name acceleratorAssumeRoleSession --query \\"Credentials.[AccessKeyId,SecretAccessKey,SessionToken]\\" --output text));
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then MGMT_BOOTSTRAPPED_HOME=\\"no\\"; fi;
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then MGMT_BOOTSTRAPPED_GLOBAL=\\"no\\"; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi;
                          unset AWS_ACCESS_KEY_ID;
                          unset AWS_SECRET_ACCESS_KEY;
                          unset AWS_SESSION_TOKEN;
                       fi
      - cd ../accelerator
      - yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --partition ",
                Object {
                  "Ref": "AWS::Partition",
                },
                "
      - if [ \\"$ENABLE_TESTER\\" = \\"true\\" ]; then yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage tester-pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; fi
  post_build:
    commands:
      - \\"inprogress_status_count=$(aws codepipeline get-pipeline-state --name \\\\\\"AWSAccelerator-Pipeline\\\\\\" | grep '\\\\\\"status\\\\\\": \\\\\\"InProgress\\\\\\"' | grep -v grep | wc -l)\\"
      - |-
        if [ $inprogress_status_count -eq 0 ]; then
                        aws codepipeline start-pipeline-execution --name \\"AWSAccelerator-Pipeline\\";
                        fi
",
              ],
            ],
          },
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "SecureBucket747CD8C0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "InstallerKey2A6A8C6D",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "aws-accelerator-installer-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRuleaws-accelerator-installer-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "InstallerAccessLogsBucket647700E9",
          },
          "LogFilePrefix": Object {
            "Fn::Join": Array [
              "",
              Array [
                "aws-accelerator-installer-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
                "/",
              ],
            ],
          },
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SecureBucketPolicy6374AC61": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "SecureBucket747CD8C0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "SolutionHelper4825923B": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DependsOn": Array [
        "SolutionHelperServiceRoleF70C0E2A",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "
        const AWS = require('aws-sdk');
        const response = require('cfn-response');
        const https = require('https');

        async function post(url, data) {
          const dataString = JSON.stringify(data)
          const options = {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              timeout: 1000, // in ms
          }
          
          return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                  if (res.statusCode < 200 || res.statusCode > 299) {
                      return reject(new Error('HTTP status code: ', res.statusCode))
                  }
                  const body = []
                  res.on('data', (chunk) => body.push(chunk))
                  res.on('end', () => {
                      const resString = Buffer.concat(body).toString()
                      resolve(resString)
                  })
              })
              req.on('error', (err) => {
                  reject(err)
              })
              req.on('timeout', () => {
                  req.destroy()
                  reject(new Error('Request time out'))
              })
              req.write(dataString)
              req.end()
          })
        }

        function uuidv4() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
          });
        }


        function sanitizeData(resourceProperties) {
          const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
          return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
              if (!keysToExclude.includes(key)) {
                  sanitizedData[key] = resourceProperties[key];
              }
              return sanitizedData;
          }, {})
        }

        exports.handler = async function (event, context) {
          console.log(JSON.stringify(event, null, 4));
          const requestType = event.RequestType;
          const resourceProperties = event.ResourceProperties;
          const resource = resourceProperties.Resource;
          let data = {};
          try {
              if (resource === 'UUID' && requestType === 'Create') {
                  data['UUID'] = uuidv4();
              }
              if (resource === 'AnonymousMetric') {
                  const currentDate = new Date()
                  data = sanitizeData(resourceProperties);
                  data['RequestType'] = requestType;
                  const payload = {
                      Solution: resourceProperties.SolutionId,
                      UUID: resourceProperties.UUID,
                      TimeStamp: currentDate.toISOString(),
                      Data: data
                  }

                  console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                  await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                  console.log('Sent Data');
              }
          } catch (error) {
              console.log(error);
          }
      
          if (requestType === 'Create') {
            await response.send(event, context, response.SUCCESS, data);
          }
          else {
            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
          }
          return;
        } 
      ",
        },
        "Description": "This function generates UUID for each deployment and sends anonymous data to the AWS Solutions team",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperServiceRoleF70C0E2A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperServiceRoleF70C0E2A": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Needed to write to CWL group",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SolutionHelperSolutionCreateUniqueID070ED802": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Resource": "UUID",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CreateUUID",
      "UpdateReplacePolicy": "Delete",
    },
    "SolutionHelperSolutionSendAnonymousData271B3D26": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BranchName": Object {
          "Ref": "RepositoryBranchName",
        },
        "Region": Object {
          "Ref": "AWS::Region",
        },
        "RepositoryName": Object {
          "Ref": "RepositoryName",
        },
        "RepositoryOwner": Object {
          "Ref": "RepositoryOwner",
        },
        "RepositorySource": Object {
          "Ref": "RepositorySource",
        },
        "Resource": "AnonymousMetric",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
        "SolutionId": "SO0199",
        "UUID": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperSolutionCreateUniqueID070ED802",
            "UUID",
          ],
        },
      },
      "Type": "Custom::AnonymousData",
      "UpdateReplacePolicy": "Delete",
    },
    "SsmParamAcceleratorVersionFF83282D": Object {
      "Properties": Object {
        "Name": "/accelerator/AWSAccelerator-Test-InstallerStack/version",
        "Type": "String",
        "Value": "1.3.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SsmParamStackId521A78D3": Object {
      "Properties": Object {
        "Name": "/accelerator/AWSAccelerator-Test-InstallerStack/stack-id",
        "Type": "String",
        "Value": Object {
          "Ref": "AWS::StackId",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "UpdatePipelineGithubTokenFunction29B64F2E": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "UpdatePipelineLambdaRole88CE0535",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the \\"License\\"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

const AWS = require('aws-sdk');

const secretsManager = new AWS.SecretsManager({});
const codePipeline = new AWS.CodePipeline({});
const installerPipelineName = process.env['INSTALLER_PIPELINE_NAME'] ?? '';
const acceleratorPipelineName = process.env['ACCELERATOR_PIPELINE_NAME'] ?? '';
const pipelineArray = [installerPipelineName, acceleratorPipelineName];

/**
 * update-pipeline-github-token - lambda handler
 *
 * @param event
 * @returns
 */

exports.handler = async (event, context) => {
  const secretDetails = event.detail.requestParameters;
  const secretArn = secretDetails.secretId;
  const secretValue = await getSecretValue(secretArn);
  await updatePipelineDetailsForBothPipelines(secretValue);
  return {
    statusCode: 200,
  };
};

async function getSecretValue(secretName) {
  try {
    const data = await secretsManager
      .getSecretValue({
        SecretId: secretName,
      })
      .promise();

    if (!data || !data.SecretString) {
      throw new Error(\`Secret \${secretName} didn't exist.\`);
    }
    console.log(\`Retrieved secret: \${secretName}...\`);
    return data.SecretString;
  } catch (error) {
    console.log(error);
    throw new Error(\`Error retrieving secret: \${secretName}.\`);
  }
}

async function updateCodePipelineSourceStage(pipelineDetails, secretValue) {
  const pipelineStages = pipelineDetails.pipeline.stages;
  const sourceStage = pipelineStages.find(o => o.name == 'Source');
  const sourceAction = sourceStage.actions.find(a => a.name == 'Source');
  if (sourceAction.provider != 'GitHub') {
    console.log('Pipeline source is not GitHub, no action will be taken.');
    return;
  }
  sourceAction.configuration.OAuthToken = secretValue;

  return pipelineDetails;
}

async function getPipelineDetails(pipelineName) {
  //This function retrieves the original Code Pipeline structure, so we can update it.
  const getPipelineParams = {
    name: pipelineName,
  };
  console.log(\`Retrieving existing pipeline configuration for: \${pipelineName}...\`);
  const pipelineObject = await codePipeline.getPipeline(getPipelineParams).promise();
  console.log(JSON.stringify(pipelineObject));
  return pipelineObject;
}

async function updatePipeline(updatedPipelineDetails) {
  //Remove metadata from getPipelineOutput to use as updatePipelineInput
  delete updatedPipelineDetails.metadata;
  console.log(\`Updating pipeline with new OAuth Token...\`);
  return codePipeline.updatePipeline(updatedPipelineDetails).promise();
}

async function updatePipelineDetailsForBothPipelines(secretValue) {
  for (const pipeline of pipelineArray) {
    try {
      const pipelineDetails = await getPipelineDetails(pipeline);
      const updatedPipelineDetails = await updateCodePipelineSourceStage(pipelineDetails, secretValue);
      if (updatedPipelineDetails) {
        await updatePipeline(updatedPipelineDetails);
      }
    } catch (error) {
      console.error(error);
      throw new Error(\`Error occurred while updating pipeline \${pipeline}\`);
    }
  }
}
",
        },
        "Description": "Lambda function to update CodePipeline OAuth Token",
        "Environment": Object {
          "Variables": Object {
            "ACCELERATOR_PIPELINE_NAME": "AWSAccelerator-Pipeline",
            "INSTALLER_PIPELINE_NAME": "AWSAccelerator-Installer",
          },
        },
        "Handler": "index.handler",
        "KmsKeyArn": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineLambdaRole88CE0535",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "UpdatePipelineGithubTokenFunctionLogGroupFCE3723A": Object {
      "Condition": "UseGitHubCondition",
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "UpdatePipelineGithubTokenFunction29B64F2E",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "UpdatePipelineGithubTokenRule79D83132": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Description": "Rule to trigger Lambda Function when the Github Accelerator Token has been updated.",
        "EventPattern": Object {
          "detail": Object {
            "eventName": Array [
              "UpdateSecret",
              "PutSecretValue",
            ],
            "eventSource": Array [
              "secretsmanager.amazonaws.com",
            ],
            "requestParameters": Object {
              "secretId": Array [
                Object {
                  "prefix": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:accelerator/github-token",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": Array [
            "AWS API Call via CloudTrail",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "UpdatePipelineGithubTokenFunction29B64F2E",
                "Arn",
              ],
            },
            "Id": "Target0",
            "RetryPolicy": Object {
              "MaximumEventAgeInSeconds": 14400,
              "MaximumRetryAttempts": 2,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UpdatePipelineGithubTokenRuleAllowEventRuleAWSAcceleratorTestInstallerStackUpdatePipelineGithubTokenFunction78C173C279CEF0A3": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenFunction29B64F2E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenRule79D83132",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UpdatePipelineLambdaPolicy284ABC36": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "IAM policy should not allow * resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codepipeline:GetPipeline",
                "codepipeline:UpdatePipeline",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":AWSAccelerator-Installer*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":AWSAccelerator-Pipeline*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:accelerator/github-token*",
                  ],
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":role/AWSAccelerator-*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UpdatePipelineLambdaPolicy284ABC36",
        "Roles": Array [
          Object {
            "Ref": "UpdatePipelineLambdaRole88CE0535",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UpdatePipelineLambdaRole88CE0535": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;

exports[`InstallerStack Stack(installer):  Snapshot Test 2`] = `
Object {
  "Conditions": Object {
    "IsCommercialCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AWS::Partition",
        },
        "aws",
      ],
    },
    "SolutionHelperAnonymousDataToAWS62E4FDE2": Object {
      "Fn::Equals": Array [
        Object {
          "Fn::FindInMap": Array [
            "SolutionHelperAnonymousData14B64A81",
            "SendAnonymousData",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "UseCodeCommitCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "codecommit",
      ],
    },
    "UseGitHubCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "github",
      ],
    },
  },
  "Mappings": Object {
    "GlobalRegionMap": Object {
      "aws": Object {
        "regionName": "us-east-1",
      },
      "aws-cn": Object {
        "regionName": "cn-northwest-1",
      },
      "aws-iso": Object {
        "regionName": "us-iso-east-1",
      },
      "aws-iso-b": Object {
        "regionName": "us-isob-east-1",
      },
      "aws-us-gov": Object {
        "regionName": "us-gov-west-1",
      },
    },
    "SolutionHelperAnonymousData14B64A81": Object {
      "SendAnonymousData": Object {
        "Data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Git Repository Configuration",
          },
          "Parameters": Array [
            "RepositorySource",
            "RepositoryOwner",
            "RepositoryName",
            "RepositoryBranchName",
          ],
        },
        Object {
          "Label": Object {
            "default": "Pipeline Configuration",
          },
          "Parameters": Array [
            "EnableApprovalStage",
            "ApprovalStageNotifyEmailList",
          ],
        },
        Object {
          "Label": Object {
            "default": "Mandatory Accounts Configuration",
          },
          "Parameters": Array [
            "ManagementAccountEmail",
            "LogArchiveAccountEmail",
            "AuditAccountEmail",
          ],
        },
        Object {
          "Label": Object {
            "default": "Environment Configuration",
          },
          "Parameters": Array [
            "ControlTowerEnabled",
          ],
        },
      ],
      "ParameterLabels": Object {
        "ApprovalStageNotifyEmailList": Object {
          "default": "Manual Approval Stage notification email list",
        },
        "AuditAccountEmail": Object {
          "default": "Audit Account Email",
        },
        "ControlTowerEnabled": Object {
          "default": "Control Tower Environment",
        },
        "EnableApprovalStage": Object {
          "default": "Enable Approval Stage",
        },
        "LogArchiveAccountEmail": Object {
          "default": "Log Archive Account Email",
        },
        "ManagementAccountEmail": Object {
          "default": "Management Account Email",
        },
        "RepositoryBranchName": Object {
          "default": "Branch Name",
        },
        "RepositoryName": Object {
          "default": "Repository Name",
        },
        "RepositoryOwner": Object {
          "default": "Repository Owner",
        },
        "RepositorySource": Object {
          "default": "Source",
        },
      },
    },
  },
  "Parameters": Object {
    "ApprovalStageNotifyEmailList": Object {
      "Description": "Provide comma(,) separated list of email ids to receive manual approval stage notification email",
      "Type": "CommaDelimitedList",
    },
    "AuditAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The security audit account (also referred to as the audit account)",
      "Type": "String",
    },
    "ControlTowerEnabled": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes if you deploying to a Control Tower environment.  Select no if using just Organizations",
      "Type": "String",
    },
    "EnableApprovalStage": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes to add a Manual Approval stage to accelerator pipeline",
      "Type": "String",
    },
    "LogArchiveAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The log archive account email",
      "Type": "String",
    },
    "ManagementAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The management (primary) account email",
      "Type": "String",
    },
    "RepositoryBranchName": Object {
      "AllowedPattern": ".+",
      "ConstraintDescription": "The repository branch name must not be empty",
      "Default": "release/v1.3.0",
      "Description": "The name of the git branch to use for installation. To determine the branch name, navigate to the Landing Zone Accelerator GitHub branches page and choose the release branch you would like to deploy. Release branch names will align with the semantic versioning of our GitHub releases. New release branches will be available as the open source project is updated with new features.",
      "Type": "String",
    },
    "RepositoryName": Object {
      "Default": "landing-zone-accelerator-on-aws",
      "Description": "The name of the git repository hosting the accelerator code",
      "Type": "String",
    },
    "RepositoryOwner": Object {
      "Default": "awslabs",
      "Description": "The owner of the repository containing the accelerator code. (GitHub Only)",
      "Type": "String",
    },
    "RepositorySource": Object {
      "AllowedValues": Array [
        "github",
        "codecommit",
      ],
      "Default": "github",
      "Description": "Specify the git host",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AcceleratorManagementKmsArnParameter1E6975BF": Object {
      "Properties": Object {
        "Name": "/accelerator/installer/kms/key-arn",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "CodeCommitPipeline2208527B": Object {
      "Condition": "UseCodeCommitCondition",
      "DependsOn": Array [
        "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "CodeCommitPipelineRole5C35E76C",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": "AWSAccelerator-Installer",
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "CodeCommitPipelineRole5C35E76C",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineRole5C35E76C",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CodeCommitPipelineRole5C35E76C": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CodeCommitPipelineRoleDefaultPolicyDE8B332B": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineRole5C35E76C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineRole5C35E76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codecommit:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    Object {
                      "Ref": "RepositoryName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipeline7B79E906": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "GitHubPipelineRoleDefaultPolicyD82457D6",
        "GitHubPipelineRole6F4DEF1B",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": "AWSAccelerator-Installer",
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "GitHubPipelineRole6F4DEF1B",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1",
                },
                "Configuration": Object {
                  "Branch": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "OAuthToken": "{{resolve:secretsmanager:accelerator/github-token:SecretString:::}}",
                  "Owner": Object {
                    "Ref": "RepositoryOwner",
                  },
                  "PollForSourceChanges": false,
                  "Repo": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "GitHubPipelineRole6F4DEF1B": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipelineRoleDefaultPolicyD82457D6": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GitHubPipelineRole6F4DEF1B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubPipelineRoleDefaultPolicyD82457D6",
        "Roles": Array [
          Object {
            "Ref": "GitHubPipelineRole6F4DEF1B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerAccessLogsBucket647700E9": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-S1",
              "reason": "AccessLogsBucket has server access logs disabled till the task for access logging completed.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This is an access logging bucket.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "aws-accelerator-s3-logs-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRuleaws-accelerator-s3-logs-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerAccessLogsBucketName4F700F48": Object {
      "Properties": Object {
        "Name": "/accelerator/installer-access-logs-bucket-name",
        "Type": "String",
        "Value": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "InstallerAccessLogsBucketPolicy20D4E285": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "InstallerAccessLogsBucket647700E9",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "InstallerAccessLogsBucket647700E9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "InstallerAdminRole7DEE4AC8": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AdministratorAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "InstallerAdminRoleDefaultPolicy7EEE1AAB": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    Object {
                      "Ref": "InstallerProject879FF821",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InstallerAdminRoleDefaultPolicy7EEE1AAB",
        "Roles": Array [
          Object {
            "Ref": "InstallerAdminRole7DEE4AC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerKey2A6A8C6D": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F76",
              "reason": "KMS key using * principal with added arn condition",
            },
          ],
        },
      },
      "Properties": Object {
        "Description": "AWS Accelerator Management Account Kms Key",
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:PrincipalARN": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":role/AWSAccelerator-*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "Allow Accelerator Role to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow SNS service to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "logs.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow Cloudwatch Logs service to use the encryption key",
            },
            Object {
              "Fn::If": Array [
                "IsCommercialCondition",
                Object {
                  "Action": Array [
                    "kms:GenerateDataKey*",
                    "kms:Decrypt",
                  ],
                  "Condition": Object {
                    "StringEquals": Object {
                      "kms:ViaService": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "sns.",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ".amazonaws.com",
                          ],
                        ],
                      },
                    },
                  },
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "codestar-notifications.amazonaws.com",
                  },
                  "Resource": "*",
                  "Sid": "KMS key access to codestar-notifications",
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerKeyAliasD5C174F0": Object {
      "Properties": Object {
        "AliasName": "alias/accelerator/installer/kms/key",
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstallerProject879FF821": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CB3",
              "reason": "Project requires access to the Docker daemon.",
            },
          ],
        },
      },
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_MEDIUM",
          "EnvironmentVariables": Array [
            Object {
              "Name": "NODE_OPTIONS",
              "Type": "PLAINTEXT",
              "Value": "--max_old_space_size=4096",
            },
            Object {
              "Name": "CDK_NEW_BOOTSTRAP",
              "Type": "PLAINTEXT",
              "Value": "1",
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_SOURCE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositorySource",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_OWNER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryOwner",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryName",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_BRANCH_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryBranchName",
              },
            },
            Object {
              "Name": "ACCELERATOR_ENABLE_APPROVAL_STAGE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "EnableApprovalStage",
              },
            },
            Object {
              "Name": "APPROVAL_STAGE_NOTIFY_EMAIL_LIST",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Fn::Join": Array [
                  ",",
                  Object {
                    "Ref": "ApprovalStageNotifyEmailList",
                  },
                ],
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountEmail",
              },
            },
            Object {
              "Name": "LOG_ARCHIVE_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "LogArchiveAccountEmail",
              },
            },
            Object {
              "Name": "AUDIT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AuditAccountEmail",
              },
            },
            Object {
              "Name": "CONTROL_TOWER_ENABLED",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ControlTowerEnabled",
              },
            },
          ],
          "Image": "aws/codebuild/standard:5.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "Name": "AWSAccelerator-InstallerProject",
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "InstallerAdminRole7DEE4AC8",
            "Arn",
          ],
        },
        "Source": Object {
          "BuildSpec": Object {
            "Fn::Join": Array [
              "",
              Array [
                "version: \\"0.2\\"
phases:
  install:
    runtime-versions:
      nodejs: 14
  pre_build:
    commands:
      - ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"no\\"
      - if [ ! -z \\"$MANAGEMENT_ACCOUNT_ID\\" ] && [ ! -z \\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" ]; then ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"yes\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then BOOTSTRAPPED_HOME=\\"no\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then BOOTSTRAPPED_GLOBAL=\\"no\\"; fi
  build:
    commands:
      - cd source
      - |-
        if [ \\"",
                Object {
                  "Ref": "AWS::Partition",
                },
                "\\" = \\"aws-cn\\" ]; then
                          sed -i \\"s#registry.yarnpkg.com#registry.npmmirror.com#g\\" yarn.lock;
                          yarn config set registry https://registry.npmmirror.com
                       fi
      - yarn install
      - yarn lerna link
      - yarn build
      - cd packages/@aws-accelerator/installer
      - if [ \\"$BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi
      - if [ \\"$BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi
      - |-
        if [ $ENABLE_EXTERNAL_PIPELINE_ACCOUNT = \\"yes\\" ]; then
                          export $(printf \\"AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s\\" $(aws sts assume-role --role-arn arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::\\"$MANAGEMENT_ACCOUNT_ID\\":role/\\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" --role-session-name acceleratorAssumeRoleSession --query \\"Credentials.[AccessKeyId,SecretAccessKey,SessionToken]\\" --output text));
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then MGMT_BOOTSTRAPPED_HOME=\\"no\\"; fi;
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then MGMT_BOOTSTRAPPED_GLOBAL=\\"no\\"; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi;
                          unset AWS_ACCESS_KEY_ID;
                          unset AWS_SECRET_ACCESS_KEY;
                          unset AWS_SESSION_TOKEN;
                       fi
      - cd ../accelerator
      - yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --partition ",
                Object {
                  "Ref": "AWS::Partition",
                },
                "
      - if [ \\"$ENABLE_TESTER\\" = \\"true\\" ]; then yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage tester-pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; fi
  post_build:
    commands:
      - \\"inprogress_status_count=$(aws codepipeline get-pipeline-state --name \\\\\\"AWSAccelerator-Pipeline\\\\\\" | grep '\\\\\\"status\\\\\\": \\\\\\"InProgress\\\\\\"' | grep -v grep | wc -l)\\"
      - |-
        if [ $inprogress_status_count -eq 0 ]; then
                        aws codepipeline start-pipeline-execution --name \\"AWSAccelerator-Pipeline\\";
                        fi
",
              ],
            ],
          },
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "SecureBucket747CD8C0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "InstallerKey2A6A8C6D",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "aws-accelerator-installer-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRuleaws-accelerator-installer-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "InstallerAccessLogsBucket647700E9",
          },
          "LogFilePrefix": Object {
            "Fn::Join": Array [
              "",
              Array [
                "aws-accelerator-installer-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
                "/",
              ],
            ],
          },
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SecureBucketPolicy6374AC61": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "SecureBucket747CD8C0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "SolutionHelper4825923B": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DependsOn": Array [
        "SolutionHelperServiceRoleF70C0E2A",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "
        const AWS = require('aws-sdk');
        const response = require('cfn-response');
        const https = require('https');

        async function post(url, data) {
          const dataString = JSON.stringify(data)
          const options = {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              timeout: 1000, // in ms
          }
          
          return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                  if (res.statusCode < 200 || res.statusCode > 299) {
                      return reject(new Error('HTTP status code: ', res.statusCode))
                  }
                  const body = []
                  res.on('data', (chunk) => body.push(chunk))
                  res.on('end', () => {
                      const resString = Buffer.concat(body).toString()
                      resolve(resString)
                  })
              })
              req.on('error', (err) => {
                  reject(err)
              })
              req.on('timeout', () => {
                  req.destroy()
                  reject(new Error('Request time out'))
              })
              req.write(dataString)
              req.end()
          })
        }

        function uuidv4() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
          });
        }


        function sanitizeData(resourceProperties) {
          const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
          return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
              if (!keysToExclude.includes(key)) {
                  sanitizedData[key] = resourceProperties[key];
              }
              return sanitizedData;
          }, {})
        }

        exports.handler = async function (event, context) {
          console.log(JSON.stringify(event, null, 4));
          const requestType = event.RequestType;
          const resourceProperties = event.ResourceProperties;
          const resource = resourceProperties.Resource;
          let data = {};
          try {
              if (resource === 'UUID' && requestType === 'Create') {
                  data['UUID'] = uuidv4();
              }
              if (resource === 'AnonymousMetric') {
                  const currentDate = new Date()
                  data = sanitizeData(resourceProperties);
                  data['RequestType'] = requestType;
                  const payload = {
                      Solution: resourceProperties.SolutionId,
                      UUID: resourceProperties.UUID,
                      TimeStamp: currentDate.toISOString(),
                      Data: data
                  }

                  console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                  await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                  console.log('Sent Data');
              }
          } catch (error) {
              console.log(error);
          }
      
          if (requestType === 'Create') {
            await response.send(event, context, response.SUCCESS, data);
          }
          else {
            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
          }
          return;
        } 
      ",
        },
        "Description": "This function generates UUID for each deployment and sends anonymous data to the AWS Solutions team",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperServiceRoleF70C0E2A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperServiceRoleF70C0E2A": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Needed to write to CWL group",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SolutionHelperSolutionCreateUniqueID070ED802": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Resource": "UUID",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CreateUUID",
      "UpdateReplacePolicy": "Delete",
    },
    "SolutionHelperSolutionSendAnonymousData271B3D26": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BranchName": Object {
          "Ref": "RepositoryBranchName",
        },
        "Region": Object {
          "Ref": "AWS::Region",
        },
        "RepositoryName": Object {
          "Ref": "RepositoryName",
        },
        "RepositoryOwner": Object {
          "Ref": "RepositoryOwner",
        },
        "RepositorySource": Object {
          "Ref": "RepositorySource",
        },
        "Resource": "AnonymousMetric",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
        "SolutionId": "SO0199",
        "UUID": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperSolutionCreateUniqueID070ED802",
            "UUID",
          ],
        },
      },
      "Type": "Custom::AnonymousData",
      "UpdateReplacePolicy": "Delete",
    },
    "SsmParamAcceleratorVersionFF83282D": Object {
      "Properties": Object {
        "Name": "/accelerator/AWSAccelerator-Test-InstallerStack/version",
        "Type": "String",
        "Value": "1.3.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SsmParamStackId521A78D3": Object {
      "Properties": Object {
        "Name": "/accelerator/AWSAccelerator-Test-InstallerStack/stack-id",
        "Type": "String",
        "Value": Object {
          "Ref": "AWS::StackId",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "UpdatePipelineGithubTokenFunction29B64F2E": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "UpdatePipelineLambdaRole88CE0535",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the \\"License\\"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

const AWS = require('aws-sdk');

const secretsManager = new AWS.SecretsManager({});
const codePipeline = new AWS.CodePipeline({});
const installerPipelineName = process.env['INSTALLER_PIPELINE_NAME'] ?? '';
const acceleratorPipelineName = process.env['ACCELERATOR_PIPELINE_NAME'] ?? '';
const pipelineArray = [installerPipelineName, acceleratorPipelineName];

/**
 * update-pipeline-github-token - lambda handler
 *
 * @param event
 * @returns
 */

exports.handler = async (event, context) => {
  const secretDetails = event.detail.requestParameters;
  const secretArn = secretDetails.secretId;
  const secretValue = await getSecretValue(secretArn);
  await updatePipelineDetailsForBothPipelines(secretValue);
  return {
    statusCode: 200,
  };
};

async function getSecretValue(secretName) {
  try {
    const data = await secretsManager
      .getSecretValue({
        SecretId: secretName,
      })
      .promise();

    if (!data || !data.SecretString) {
      throw new Error(\`Secret \${secretName} didn't exist.\`);
    }
    console.log(\`Retrieved secret: \${secretName}...\`);
    return data.SecretString;
  } catch (error) {
    console.log(error);
    throw new Error(\`Error retrieving secret: \${secretName}.\`);
  }
}

async function updateCodePipelineSourceStage(pipelineDetails, secretValue) {
  const pipelineStages = pipelineDetails.pipeline.stages;
  const sourceStage = pipelineStages.find(o => o.name == 'Source');
  const sourceAction = sourceStage.actions.find(a => a.name == 'Source');
  if (sourceAction.provider != 'GitHub') {
    console.log('Pipeline source is not GitHub, no action will be taken.');
    return;
  }
  sourceAction.configuration.OAuthToken = secretValue;

  return pipelineDetails;
}

async function getPipelineDetails(pipelineName) {
  //This function retrieves the original Code Pipeline structure, so we can update it.
  const getPipelineParams = {
    name: pipelineName,
  };
  console.log(\`Retrieving existing pipeline configuration for: \${pipelineName}...\`);
  const pipelineObject = await codePipeline.getPipeline(getPipelineParams).promise();
  console.log(JSON.stringify(pipelineObject));
  return pipelineObject;
}

async function updatePipeline(updatedPipelineDetails) {
  //Remove metadata from getPipelineOutput to use as updatePipelineInput
  delete updatedPipelineDetails.metadata;
  console.log(\`Updating pipeline with new OAuth Token...\`);
  return codePipeline.updatePipeline(updatedPipelineDetails).promise();
}

async function updatePipelineDetailsForBothPipelines(secretValue) {
  for (const pipeline of pipelineArray) {
    try {
      const pipelineDetails = await getPipelineDetails(pipeline);
      const updatedPipelineDetails = await updateCodePipelineSourceStage(pipelineDetails, secretValue);
      if (updatedPipelineDetails) {
        await updatePipeline(updatedPipelineDetails);
      }
    } catch (error) {
      console.error(error);
      throw new Error(\`Error occurred while updating pipeline \${pipeline}\`);
    }
  }
}
",
        },
        "Description": "Lambda function to update CodePipeline OAuth Token",
        "Environment": Object {
          "Variables": Object {
            "ACCELERATOR_PIPELINE_NAME": "AWSAccelerator-Pipeline",
            "INSTALLER_PIPELINE_NAME": "AWSAccelerator-Installer",
          },
        },
        "Handler": "index.handler",
        "KmsKeyArn": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineLambdaRole88CE0535",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "UpdatePipelineGithubTokenFunctionLogGroupFCE3723A": Object {
      "Condition": "UseGitHubCondition",
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "UpdatePipelineGithubTokenFunction29B64F2E",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "UpdatePipelineGithubTokenRule79D83132": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Description": "Rule to trigger Lambda Function when the Github Accelerator Token has been updated.",
        "EventPattern": Object {
          "detail": Object {
            "eventName": Array [
              "UpdateSecret",
              "PutSecretValue",
            ],
            "eventSource": Array [
              "secretsmanager.amazonaws.com",
            ],
            "requestParameters": Object {
              "secretId": Array [
                Object {
                  "prefix": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:accelerator/github-token",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": Array [
            "AWS API Call via CloudTrail",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "UpdatePipelineGithubTokenFunction29B64F2E",
                "Arn",
              ],
            },
            "Id": "Target0",
            "RetryPolicy": Object {
              "MaximumEventAgeInSeconds": 14400,
              "MaximumRetryAttempts": 2,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UpdatePipelineGithubTokenRuleAllowEventRuleAWSAcceleratorTestInstallerStackUpdatePipelineGithubTokenFunction78C173C279CEF0A3": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenFunction29B64F2E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenRule79D83132",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UpdatePipelineLambdaPolicy284ABC36": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "IAM policy should not allow * resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codepipeline:GetPipeline",
                "codepipeline:UpdatePipeline",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":AWSAccelerator-Installer*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":AWSAccelerator-Pipeline*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:accelerator/github-token*",
                  ],
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":role/AWSAccelerator-*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UpdatePipelineLambdaPolicy284ABC36",
        "Roles": Array [
          Object {
            "Ref": "UpdatePipelineLambdaRole88CE0535",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UpdatePipelineLambdaRole88CE0535": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;

exports[`InstallerStack Stack(installer):  Snapshot Test 3`] = `
Object {
  "Conditions": Object {
    "IsCommercialCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AWS::Partition",
        },
        "aws",
      ],
    },
    "SolutionHelperAnonymousDataToAWS62E4FDE2": Object {
      "Fn::Equals": Array [
        Object {
          "Fn::FindInMap": Array [
            "SolutionHelperAnonymousData14B64A81",
            "SendAnonymousData",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "UseCodeCommitCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "codecommit",
      ],
    },
    "UseGitHubCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "github",
      ],
    },
  },
  "Mappings": Object {
    "GlobalRegionMap": Object {
      "aws": Object {
        "regionName": "us-east-1",
      },
      "aws-cn": Object {
        "regionName": "cn-northwest-1",
      },
      "aws-iso": Object {
        "regionName": "us-iso-east-1",
      },
      "aws-iso-b": Object {
        "regionName": "us-isob-east-1",
      },
      "aws-us-gov": Object {
        "regionName": "us-gov-west-1",
      },
    },
    "SolutionHelperAnonymousData14B64A81": Object {
      "SendAnonymousData": Object {
        "Data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Git Repository Configuration",
          },
          "Parameters": Array [
            "RepositorySource",
            "RepositoryOwner",
            "RepositoryName",
            "RepositoryBranchName",
          ],
        },
        Object {
          "Label": Object {
            "default": "Pipeline Configuration",
          },
          "Parameters": Array [
            "EnableApprovalStage",
            "ApprovalStageNotifyEmailList",
          ],
        },
        Object {
          "Label": Object {
            "default": "Mandatory Accounts Configuration",
          },
          "Parameters": Array [
            "ManagementAccountEmail",
            "LogArchiveAccountEmail",
            "AuditAccountEmail",
          ],
        },
        Object {
          "Label": Object {
            "default": "Environment Configuration",
          },
          "Parameters": Array [
            "ControlTowerEnabled",
          ],
        },
        Object {
          "Label": Object {
            "default": "Target Environment Configuration",
          },
          "Parameters": Array [
            "AcceleratorQualifier",
            "ManagementAccountId",
            "ManagementAccountRoleName",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AcceleratorQualifier": Object {
          "default": "Accelerator Qualifier",
        },
        "ApprovalStageNotifyEmailList": Object {
          "default": "Manual Approval Stage notification email list",
        },
        "AuditAccountEmail": Object {
          "default": "Audit Account Email",
        },
        "ControlTowerEnabled": Object {
          "default": "Control Tower Environment",
        },
        "EnableApprovalStage": Object {
          "default": "Enable Approval Stage",
        },
        "LogArchiveAccountEmail": Object {
          "default": "Log Archive Account Email",
        },
        "ManagementAccountEmail": Object {
          "default": "Management Account Email",
        },
        "ManagementAccountId": Object {
          "default": "Management Account ID",
        },
        "ManagementAccountRoleName": Object {
          "default": "Management Account Role Name",
        },
        "RepositoryBranchName": Object {
          "default": "Branch Name",
        },
        "RepositoryName": Object {
          "default": "Repository Name",
        },
        "RepositoryOwner": Object {
          "default": "Repository Owner",
        },
        "RepositorySource": Object {
          "default": "Source",
        },
      },
    },
  },
  "Parameters": Object {
    "AcceleratorQualifier": Object {
      "AllowedPattern": "^[a-z]+[a-z0-9-]{1,61}[a-z0-9]+$",
      "Description": "Accelerator assets arn qualifier",
      "Type": "String",
    },
    "ApprovalStageNotifyEmailList": Object {
      "Description": "Provide comma(,) separated list of email ids to receive manual approval stage notification email",
      "Type": "CommaDelimitedList",
    },
    "AuditAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The security audit account (also referred to as the audit account)",
      "Type": "String",
    },
    "ControlTowerEnabled": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes if you deploying to a Control Tower environment.  Select no if using just Organizations",
      "Type": "String",
    },
    "EnableApprovalStage": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes to add a Manual Approval stage to accelerator pipeline",
      "Type": "String",
    },
    "LogArchiveAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The log archive account email",
      "Type": "String",
    },
    "ManagementAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The management (primary) account email",
      "Type": "String",
    },
    "ManagementAccountId": Object {
      "Description": "Target management account id",
      "Type": "String",
    },
    "ManagementAccountRoleName": Object {
      "Description": "Target management account role name",
      "Type": "String",
    },
    "RepositoryBranchName": Object {
      "AllowedPattern": ".+",
      "ConstraintDescription": "The repository branch name must not be empty",
      "Default": "release/v1.3.0",
      "Description": "The name of the git branch to use for installation. To determine the branch name, navigate to the Landing Zone Accelerator GitHub branches page and choose the release branch you would like to deploy. Release branch names will align with the semantic versioning of our GitHub releases. New release branches will be available as the open source project is updated with new features.",
      "Type": "String",
    },
    "RepositoryName": Object {
      "Default": "landing-zone-accelerator-on-aws",
      "Description": "The name of the git repository hosting the accelerator code",
      "Type": "String",
    },
    "RepositoryOwner": Object {
      "Default": "awslabs",
      "Description": "The owner of the repository containing the accelerator code. (GitHub Only)",
      "Type": "String",
    },
    "RepositorySource": Object {
      "AllowedValues": Array [
        "github",
        "codecommit",
      ],
      "Default": "github",
      "Description": "Specify the git host",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AcceleratorManagementKmsArnParameter1E6975BF": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer/kms/key-arn",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "CodeCommitPipeline2208527B": Object {
      "Condition": "UseCodeCommitCondition",
      "DependsOn": Array [
        "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "CodeCommitPipelineRole5C35E76C",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer",
            ],
          ],
        },
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "CodeCommitPipelineRole5C35E76C",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineRole5C35E76C",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CodeCommitPipelineRole5C35E76C": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CodeCommitPipelineRoleDefaultPolicyDE8B332B": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineRole5C35E76C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineRole5C35E76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codecommit:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    Object {
                      "Ref": "RepositoryName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipeline7B79E906": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "GitHubPipelineRoleDefaultPolicyD82457D6",
        "GitHubPipelineRole6F4DEF1B",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer",
            ],
          ],
        },
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "GitHubPipelineRole6F4DEF1B",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1",
                },
                "Configuration": Object {
                  "Branch": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "OAuthToken": "{{resolve:secretsmanager:accelerator/github-token:SecretString:::}}",
                  "Owner": Object {
                    "Ref": "RepositoryOwner",
                  },
                  "PollForSourceChanges": false,
                  "Repo": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "GitHubPipelineRole6F4DEF1B": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipelineRoleDefaultPolicyD82457D6": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GitHubPipelineRole6F4DEF1B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubPipelineRoleDefaultPolicyD82457D6",
        "Roles": Array [
          Object {
            "Ref": "GitHubPipelineRole6F4DEF1B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerAccessLogsBucket647700E9": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-S1",
              "reason": "AccessLogsBucket has server access logs disabled till the task for access logging completed.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This is an access logging bucket.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-s3-logs-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRule",
                    Object {
                      "Ref": "AcceleratorQualifier",
                    },
                    "-s3-logs-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerAccessLogsBucketName4F700F48": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer-access-logs-bucket-name",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "InstallerAccessLogsBucketPolicy20D4E285": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "InstallerAccessLogsBucket647700E9",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "InstallerAccessLogsBucket647700E9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "InstallerAdminRole7DEE4AC8": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AdministratorAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "InstallerAdminRoleDefaultPolicy7EEE1AAB": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    Object {
                      "Ref": "InstallerProject879FF821",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InstallerAdminRoleDefaultPolicy7EEE1AAB",
        "Roles": Array [
          Object {
            "Ref": "InstallerAdminRole7DEE4AC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerKey2A6A8C6D": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F76",
              "reason": "KMS key using * principal with added arn condition",
            },
          ],
        },
      },
      "Properties": Object {
        "Description": "AWS Accelerator Management Account Kms Key",
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:PrincipalARN": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":role/",
                        Object {
                          "Ref": "AcceleratorQualifier",
                        },
                        "-*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "Allow Accelerator Role to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow SNS service to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "logs.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow Cloudwatch Logs service to use the encryption key",
            },
            Object {
              "Fn::If": Array [
                "IsCommercialCondition",
                Object {
                  "Action": Array [
                    "kms:GenerateDataKey*",
                    "kms:Decrypt",
                  ],
                  "Condition": Object {
                    "StringEquals": Object {
                      "kms:ViaService": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "sns.",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ".amazonaws.com",
                          ],
                        ],
                      },
                    },
                  },
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "codestar-notifications.amazonaws.com",
                  },
                  "Resource": "*",
                  "Sid": "KMS key access to codestar-notifications",
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerKeyAliasD5C174F0": Object {
      "Properties": Object {
        "AliasName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "alias/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer/kms/key",
            ],
          ],
        },
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstallerProject879FF821": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CB3",
              "reason": "Project requires access to the Docker daemon.",
            },
          ],
        },
      },
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_MEDIUM",
          "EnvironmentVariables": Array [
            Object {
              "Name": "NODE_OPTIONS",
              "Type": "PLAINTEXT",
              "Value": "--max_old_space_size=4096",
            },
            Object {
              "Name": "CDK_NEW_BOOTSTRAP",
              "Type": "PLAINTEXT",
              "Value": "1",
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_SOURCE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositorySource",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_OWNER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryOwner",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryName",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_BRANCH_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryBranchName",
              },
            },
            Object {
              "Name": "ACCELERATOR_ENABLE_APPROVAL_STAGE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "EnableApprovalStage",
              },
            },
            Object {
              "Name": "APPROVAL_STAGE_NOTIFY_EMAIL_LIST",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Fn::Join": Array [
                  ",",
                  Object {
                    "Ref": "ApprovalStageNotifyEmailList",
                  },
                ],
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountEmail",
              },
            },
            Object {
              "Name": "LOG_ARCHIVE_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "LogArchiveAccountEmail",
              },
            },
            Object {
              "Name": "AUDIT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AuditAccountEmail",
              },
            },
            Object {
              "Name": "CONTROL_TOWER_ENABLED",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ControlTowerEnabled",
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountId",
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_ROLE_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountRoleName",
              },
            },
            Object {
              "Name": "ACCELERATOR_QUALIFIER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AcceleratorQualifier",
              },
            },
            Object {
              "Name": "ENABLE_TESTER",
              "Type": "PLAINTEXT",
              "Value": "true",
            },
            Object {
              "Name": "MANAGEMENT_CROSS_ACCOUNT_ROLE_NAME",
              "Type": "PLAINTEXT",
              "Value": "AWSControlTowerExecution",
            },
          ],
          "Image": "aws/codebuild/standard:5.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer-project",
            ],
          ],
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "InstallerAdminRole7DEE4AC8",
            "Arn",
          ],
        },
        "Source": Object {
          "BuildSpec": Object {
            "Fn::Join": Array [
              "",
              Array [
                "version: \\"0.2\\"
phases:
  install:
    runtime-versions:
      nodejs: 14
  pre_build:
    commands:
      - ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"no\\"
      - if [ ! -z \\"$MANAGEMENT_ACCOUNT_ID\\" ] && [ ! -z \\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" ]; then ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"yes\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then BOOTSTRAPPED_HOME=\\"no\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then BOOTSTRAPPED_GLOBAL=\\"no\\"; fi
  build:
    commands:
      - cd source
      - |-
        if [ \\"",
                Object {
                  "Ref": "AWS::Partition",
                },
                "\\" = \\"aws-cn\\" ]; then
                          sed -i \\"s#registry.yarnpkg.com#registry.npmmirror.com#g\\" yarn.lock;
                          yarn config set registry https://registry.npmmirror.com
                       fi
      - yarn install
      - yarn lerna link
      - yarn build
      - cd packages/@aws-accelerator/installer
      - if [ \\"$BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi
      - if [ \\"$BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi
      - |-
        if [ $ENABLE_EXTERNAL_PIPELINE_ACCOUNT = \\"yes\\" ]; then
                          export $(printf \\"AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s\\" $(aws sts assume-role --role-arn arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::\\"$MANAGEMENT_ACCOUNT_ID\\":role/\\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" --role-session-name acceleratorAssumeRoleSession --query \\"Credentials.[AccessKeyId,SecretAccessKey,SessionToken]\\" --output text));
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then MGMT_BOOTSTRAPPED_HOME=\\"no\\"; fi;
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then MGMT_BOOTSTRAPPED_GLOBAL=\\"no\\"; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi;
                          unset AWS_ACCESS_KEY_ID;
                          unset AWS_SECRET_ACCESS_KEY;
                          unset AWS_SESSION_TOKEN;
                       fi
      - cd ../accelerator
      - yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --partition ",
                Object {
                  "Ref": "AWS::Partition",
                },
                "
      - if [ \\"$ENABLE_TESTER\\" = \\"true\\" ]; then yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage tester-pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; fi
  post_build:
    commands:
      - \\"inprogress_status_count=$(aws codepipeline get-pipeline-state --name \\\\\\"",
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-pipeline\\\\\\" | grep '\\\\\\"status\\\\\\": \\\\\\"InProgress\\\\\\"' | grep -v grep | wc -l)\\"
      - |-
        if [ $inprogress_status_count -eq 0 ]; then
                        aws codepipeline start-pipeline-execution --name \\"",
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-pipeline\\";
                        fi
",
              ],
            ],
          },
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "SecureBucket747CD8C0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "InstallerKey2A6A8C6D",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRule",
                    Object {
                      "Ref": "AcceleratorQualifier",
                    },
                    "-installer-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "InstallerAccessLogsBucket647700E9",
          },
          "LogFilePrefix": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-installer-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
                "/",
              ],
            ],
          },
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SecureBucketPolicy6374AC61": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "SecureBucket747CD8C0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "SolutionHelper4825923B": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DependsOn": Array [
        "SolutionHelperServiceRoleF70C0E2A",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "
        const AWS = require('aws-sdk');
        const response = require('cfn-response');
        const https = require('https');

        async function post(url, data) {
          const dataString = JSON.stringify(data)
          const options = {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              timeout: 1000, // in ms
          }
          
          return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                  if (res.statusCode < 200 || res.statusCode > 299) {
                      return reject(new Error('HTTP status code: ', res.statusCode))
                  }
                  const body = []
                  res.on('data', (chunk) => body.push(chunk))
                  res.on('end', () => {
                      const resString = Buffer.concat(body).toString()
                      resolve(resString)
                  })
              })
              req.on('error', (err) => {
                  reject(err)
              })
              req.on('timeout', () => {
                  req.destroy()
                  reject(new Error('Request time out'))
              })
              req.write(dataString)
              req.end()
          })
        }

        function uuidv4() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
          });
        }


        function sanitizeData(resourceProperties) {
          const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
          return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
              if (!keysToExclude.includes(key)) {
                  sanitizedData[key] = resourceProperties[key];
              }
              return sanitizedData;
          }, {})
        }

        exports.handler = async function (event, context) {
          console.log(JSON.stringify(event, null, 4));
          const requestType = event.RequestType;
          const resourceProperties = event.ResourceProperties;
          const resource = resourceProperties.Resource;
          let data = {};
          try {
              if (resource === 'UUID' && requestType === 'Create') {
                  data['UUID'] = uuidv4();
              }
              if (resource === 'AnonymousMetric') {
                  const currentDate = new Date()
                  data = sanitizeData(resourceProperties);
                  data['RequestType'] = requestType;
                  const payload = {
                      Solution: resourceProperties.SolutionId,
                      UUID: resourceProperties.UUID,
                      TimeStamp: currentDate.toISOString(),
                      Data: data
                  }

                  console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                  await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                  console.log('Sent Data');
              }
          } catch (error) {
              console.log(error);
          }
      
          if (requestType === 'Create') {
            await response.send(event, context, response.SUCCESS, data);
          }
          else {
            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
          }
          return;
        } 
      ",
        },
        "Description": "This function generates UUID for each deployment and sends anonymous data to the AWS Solutions team",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperServiceRoleF70C0E2A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperServiceRoleF70C0E2A": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Needed to write to CWL group",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SolutionHelperSolutionCreateUniqueID070ED802": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Resource": "UUID",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CreateUUID",
      "UpdateReplacePolicy": "Delete",
    },
    "SolutionHelperSolutionSendAnonymousData271B3D26": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BranchName": Object {
          "Ref": "RepositoryBranchName",
        },
        "Region": Object {
          "Ref": "AWS::Region",
        },
        "RepositoryName": Object {
          "Ref": "RepositoryName",
        },
        "RepositoryOwner": Object {
          "Ref": "RepositoryOwner",
        },
        "RepositorySource": Object {
          "Ref": "RepositorySource",
        },
        "Resource": "AnonymousMetric",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
        "SolutionId": "SO0199",
        "UUID": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperSolutionCreateUniqueID070ED802",
            "UUID",
          ],
        },
      },
      "Type": "Custom::AnonymousData",
      "UpdateReplacePolicy": "Delete",
    },
    "SsmParamAcceleratorVersionFF83282D": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/AWSAccelerator-Test-InstallerStack/version",
            ],
          ],
        },
        "Type": "String",
        "Value": "1.3.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SsmParamStackId521A78D3": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/AWSAccelerator-Test-InstallerStack/stack-id",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "AWS::StackId",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "UpdatePipelineGithubTokenFunction29B64F2E": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "UpdatePipelineLambdaRole88CE0535",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the \\"License\\"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

const AWS = require('aws-sdk');

const secretsManager = new AWS.SecretsManager({});
const codePipeline = new AWS.CodePipeline({});
const installerPipelineName = process.env['INSTALLER_PIPELINE_NAME'] ?? '';
const acceleratorPipelineName = process.env['ACCELERATOR_PIPELINE_NAME'] ?? '';
const pipelineArray = [installerPipelineName, acceleratorPipelineName];

/**
 * update-pipeline-github-token - lambda handler
 *
 * @param event
 * @returns
 */

exports.handler = async (event, context) => {
  const secretDetails = event.detail.requestParameters;
  const secretArn = secretDetails.secretId;
  const secretValue = await getSecretValue(secretArn);
  await updatePipelineDetailsForBothPipelines(secretValue);
  return {
    statusCode: 200,
  };
};

async function getSecretValue(secretName) {
  try {
    const data = await secretsManager
      .getSecretValue({
        SecretId: secretName,
      })
      .promise();

    if (!data || !data.SecretString) {
      throw new Error(\`Secret \${secretName} didn't exist.\`);
    }
    console.log(\`Retrieved secret: \${secretName}...\`);
    return data.SecretString;
  } catch (error) {
    console.log(error);
    throw new Error(\`Error retrieving secret: \${secretName}.\`);
  }
}

async function updateCodePipelineSourceStage(pipelineDetails, secretValue) {
  const pipelineStages = pipelineDetails.pipeline.stages;
  const sourceStage = pipelineStages.find(o => o.name == 'Source');
  const sourceAction = sourceStage.actions.find(a => a.name == 'Source');
  if (sourceAction.provider != 'GitHub') {
    console.log('Pipeline source is not GitHub, no action will be taken.');
    return;
  }
  sourceAction.configuration.OAuthToken = secretValue;

  return pipelineDetails;
}

async function getPipelineDetails(pipelineName) {
  //This function retrieves the original Code Pipeline structure, so we can update it.
  const getPipelineParams = {
    name: pipelineName,
  };
  console.log(\`Retrieving existing pipeline configuration for: \${pipelineName}...\`);
  const pipelineObject = await codePipeline.getPipeline(getPipelineParams).promise();
  console.log(JSON.stringify(pipelineObject));
  return pipelineObject;
}

async function updatePipeline(updatedPipelineDetails) {
  //Remove metadata from getPipelineOutput to use as updatePipelineInput
  delete updatedPipelineDetails.metadata;
  console.log(\`Updating pipeline with new OAuth Token...\`);
  return codePipeline.updatePipeline(updatedPipelineDetails).promise();
}

async function updatePipelineDetailsForBothPipelines(secretValue) {
  for (const pipeline of pipelineArray) {
    try {
      const pipelineDetails = await getPipelineDetails(pipeline);
      const updatedPipelineDetails = await updateCodePipelineSourceStage(pipelineDetails, secretValue);
      if (updatedPipelineDetails) {
        await updatePipeline(updatedPipelineDetails);
      }
    } catch (error) {
      console.error(error);
      throw new Error(\`Error occurred while updating pipeline \${pipeline}\`);
    }
  }
}
",
        },
        "Description": "Lambda function to update CodePipeline OAuth Token",
        "Environment": Object {
          "Variables": Object {
            "ACCELERATOR_PIPELINE_NAME": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AcceleratorQualifier",
                  },
                  "-pipeline",
                ],
              ],
            },
            "INSTALLER_PIPELINE_NAME": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AcceleratorQualifier",
                  },
                  "-installer",
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "KmsKeyArn": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineLambdaRole88CE0535",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "UpdatePipelineGithubTokenFunctionLogGroupFCE3723A": Object {
      "Condition": "UseGitHubCondition",
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "UpdatePipelineGithubTokenFunction29B64F2E",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "UpdatePipelineGithubTokenRule79D83132": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Description": "Rule to trigger Lambda Function when the Github Accelerator Token has been updated.",
        "EventPattern": Object {
          "detail": Object {
            "eventName": Array [
              "UpdateSecret",
              "PutSecretValue",
            ],
            "eventSource": Array [
              "secretsmanager.amazonaws.com",
            ],
            "requestParameters": Object {
              "secretId": Array [
                Object {
                  "prefix": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:accelerator/github-token",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": Array [
            "AWS API Call via CloudTrail",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "UpdatePipelineGithubTokenFunction29B64F2E",
                "Arn",
              ],
            },
            "Id": "Target0",
            "RetryPolicy": Object {
              "MaximumEventAgeInSeconds": 14400,
              "MaximumRetryAttempts": 2,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UpdatePipelineGithubTokenRuleAllowEventRuleAWSAcceleratorTestInstallerStackUpdatePipelineGithubTokenFunction78C173C279CEF0A3": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenFunction29B64F2E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenRule79D83132",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UpdatePipelineLambdaPolicy284ABC36": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "IAM policy should not allow * resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codepipeline:GetPipeline",
                "codepipeline:UpdatePipeline",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-installer*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-pipeline*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:accelerator/github-token*",
                  ],
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":role/",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UpdatePipelineLambdaPolicy284ABC36",
        "Roles": Array [
          Object {
            "Ref": "UpdatePipelineLambdaRole88CE0535",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UpdatePipelineLambdaRole88CE0535": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;

exports[`InstallerStack Stack(installer):  Snapshot Test 4`] = `
Object {
  "Conditions": Object {
    "IsCommercialCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "AWS::Partition",
        },
        "aws",
      ],
    },
    "SolutionHelperAnonymousDataToAWS62E4FDE2": Object {
      "Fn::Equals": Array [
        Object {
          "Fn::FindInMap": Array [
            "SolutionHelperAnonymousData14B64A81",
            "SendAnonymousData",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "UseCodeCommitCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "codecommit",
      ],
    },
    "UseGitHubCondition": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "RepositorySource",
        },
        "github",
      ],
    },
  },
  "Mappings": Object {
    "GlobalRegionMap": Object {
      "aws": Object {
        "regionName": "us-east-1",
      },
      "aws-cn": Object {
        "regionName": "cn-northwest-1",
      },
      "aws-iso": Object {
        "regionName": "us-iso-east-1",
      },
      "aws-iso-b": Object {
        "regionName": "us-isob-east-1",
      },
      "aws-us-gov": Object {
        "regionName": "us-gov-west-1",
      },
    },
    "SolutionHelperAnonymousData14B64A81": Object {
      "SendAnonymousData": Object {
        "Data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Git Repository Configuration",
          },
          "Parameters": Array [
            "RepositorySource",
            "RepositoryOwner",
            "RepositoryName",
            "RepositoryBranchName",
          ],
        },
        Object {
          "Label": Object {
            "default": "Pipeline Configuration",
          },
          "Parameters": Array [
            "EnableApprovalStage",
            "ApprovalStageNotifyEmailList",
          ],
        },
        Object {
          "Label": Object {
            "default": "Mandatory Accounts Configuration",
          },
          "Parameters": Array [
            "ManagementAccountEmail",
            "LogArchiveAccountEmail",
            "AuditAccountEmail",
          ],
        },
        Object {
          "Label": Object {
            "default": "Environment Configuration",
          },
          "Parameters": Array [
            "ControlTowerEnabled",
          ],
        },
        Object {
          "Label": Object {
            "default": "Target Environment Configuration",
          },
          "Parameters": Array [
            "AcceleratorQualifier",
            "ManagementAccountId",
            "ManagementAccountRoleName",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AcceleratorQualifier": Object {
          "default": "Accelerator Qualifier",
        },
        "ApprovalStageNotifyEmailList": Object {
          "default": "Manual Approval Stage notification email list",
        },
        "AuditAccountEmail": Object {
          "default": "Audit Account Email",
        },
        "ControlTowerEnabled": Object {
          "default": "Control Tower Environment",
        },
        "EnableApprovalStage": Object {
          "default": "Enable Approval Stage",
        },
        "LogArchiveAccountEmail": Object {
          "default": "Log Archive Account Email",
        },
        "ManagementAccountEmail": Object {
          "default": "Management Account Email",
        },
        "ManagementAccountId": Object {
          "default": "Management Account ID",
        },
        "ManagementAccountRoleName": Object {
          "default": "Management Account Role Name",
        },
        "RepositoryBranchName": Object {
          "default": "Branch Name",
        },
        "RepositoryName": Object {
          "default": "Repository Name",
        },
        "RepositoryOwner": Object {
          "default": "Repository Owner",
        },
        "RepositorySource": Object {
          "default": "Source",
        },
      },
    },
  },
  "Parameters": Object {
    "AcceleratorQualifier": Object {
      "AllowedPattern": "^[a-z]+[a-z0-9-]{1,61}[a-z0-9]+$",
      "Description": "Accelerator assets arn qualifier",
      "Type": "String",
    },
    "ApprovalStageNotifyEmailList": Object {
      "Description": "Provide comma(,) separated list of email ids to receive manual approval stage notification email",
      "Type": "CommaDelimitedList",
    },
    "AuditAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The security audit account (also referred to as the audit account)",
      "Type": "String",
    },
    "ControlTowerEnabled": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes if you deploying to a Control Tower environment.  Select no if using just Organizations",
      "Type": "String",
    },
    "EnableApprovalStage": Object {
      "AllowedValues": Array [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Select yes to add a Manual Approval stage to accelerator pipeline",
      "Type": "String",
    },
    "LogArchiveAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The log archive account email",
      "Type": "String",
    },
    "ManagementAccountEmail": Object {
      "AllowedPattern": "[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+",
      "ConstraintDescription": "Must be a valid email address matching \\"[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+\\"",
      "Description": "The management (primary) account email",
      "Type": "String",
    },
    "ManagementAccountId": Object {
      "Description": "Target management account id",
      "Type": "String",
    },
    "ManagementAccountRoleName": Object {
      "Description": "Target management account role name",
      "Type": "String",
    },
    "RepositoryBranchName": Object {
      "AllowedPattern": ".+",
      "ConstraintDescription": "The repository branch name must not be empty",
      "Default": "release/v1.3.0",
      "Description": "The name of the git branch to use for installation. To determine the branch name, navigate to the Landing Zone Accelerator GitHub branches page and choose the release branch you would like to deploy. Release branch names will align with the semantic versioning of our GitHub releases. New release branches will be available as the open source project is updated with new features.",
      "Type": "String",
    },
    "RepositoryName": Object {
      "Default": "landing-zone-accelerator-on-aws",
      "Description": "The name of the git repository hosting the accelerator code",
      "Type": "String",
    },
    "RepositoryOwner": Object {
      "Default": "awslabs",
      "Description": "The owner of the repository containing the accelerator code. (GitHub Only)",
      "Type": "String",
    },
    "RepositorySource": Object {
      "AllowedValues": Array [
        "github",
        "codecommit",
      ],
      "Default": "github",
      "Description": "Specify the git host",
      "Type": "String",
    },
  },
  "Resources": Object {
    "AcceleratorManagementKmsArnParameter1E6975BF": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer/kms/key-arn",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "CodeCommitPipeline2208527B": Object {
      "Condition": "UseCodeCommitCondition",
      "DependsOn": Array [
        "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "CodeCommitPipelineRole5C35E76C",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer",
            ],
          ],
        },
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "CodeCommitPipelineRole5C35E76C",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CodeCommitPipelineRole5C35E76C",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CodeCommitPipelineRole5C35E76C": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CodeCommitPipelineRoleDefaultPolicyDE8B332B": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CodeCommitPipelineRole5C35E76C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineRoleDefaultPolicyDE8B332B",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineRole5C35E76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D": Object {
      "Condition": "UseCodeCommitCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codecommit:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    Object {
                      "Ref": "RepositoryName",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CodeCommitPipelineSourceCodePipelineActionRoleDefaultPolicyF71E0C0D",
        "Roles": Array [
          Object {
            "Ref": "CodeCommitPipelineSourceCodePipelineActionRoleFB176191",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CodeCommitPipelineSourceCodePipelineActionRoleFB176191": Object {
      "Condition": "UseCodeCommitCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipeline7B79E906": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "GitHubPipelineRoleDefaultPolicyD82457D6",
        "GitHubPipelineRole6F4DEF1B",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "InstallerKey2A6A8C6D",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "SecureBucket747CD8C0",
          },
          "Type": "S3",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer",
            ],
          ],
        },
        "RestartExecutionOnUpdate": true,
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "GitHubPipelineRole6F4DEF1B",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1",
                },
                "Configuration": Object {
                  "Branch": Object {
                    "Ref": "RepositoryBranchName",
                  },
                  "OAuthToken": "{{resolve:secretsmanager:accelerator/github-token:SecretString:::}}",
                  "Owner": Object {
                    "Ref": "RepositoryOwner",
                  },
                  "PollForSourceChanges": false,
                  "Repo": Object {
                    "Ref": "RepositoryName",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "InstallerProject879FF821",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Source",
                  },
                ],
                "Name": "Install",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Install",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "GitHubPipelineRole6F4DEF1B": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPipelineRoleDefaultPolicyD82457D6": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GitHubPipelineRole6F4DEF1B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerProject879FF821",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubPipelineRoleDefaultPolicyD82457D6",
        "Roles": Array [
          Object {
            "Ref": "GitHubPipelineRole6F4DEF1B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerAccessLogsBucket647700E9": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-S1",
              "reason": "AccessLogsBucket has server access logs disabled till the task for access logging completed.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This is an access logging bucket.",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-s3-logs-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRule",
                    Object {
                      "Ref": "AcceleratorQualifier",
                    },
                    "-s3-logs-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerAccessLogsBucketName4F700F48": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer-access-logs-bucket-name",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "InstallerAccessLogsBucketPolicy20D4E285": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "InstallerAccessLogsBucket647700E9",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "InstallerAccessLogsBucket647700E9",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "InstallerAccessLogsBucket647700E9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "InstallerAdminRole7DEE4AC8": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AdministratorAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "InstallerAdminRoleDefaultPolicy7EEE1AAB": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "InstallerProject879FF821",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    Object {
                      "Ref": "InstallerProject879FF821",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "InstallerKey2A6A8C6D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "InstallerAdminRoleDefaultPolicy7EEE1AAB",
        "Roles": Array [
          Object {
            "Ref": "InstallerAdminRole7DEE4AC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "InstallerKey2A6A8C6D": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F76",
              "reason": "KMS key using * principal with added arn condition",
            },
          ],
        },
      },
      "Properties": Object {
        "Description": "AWS Accelerator Management Account Kms Key",
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:PrincipalARN": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":role/",
                        Object {
                          "Ref": "AcceleratorQualifier",
                        },
                        "-*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": "*",
              "Sid": "Allow Accelerator Role to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "sns.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow SNS service to use the encryption key",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "logs.amazonaws.com",
              },
              "Resource": "*",
              "Sid": "Allow Cloudwatch Logs service to use the encryption key",
            },
            Object {
              "Fn::If": Array [
                "IsCommercialCondition",
                Object {
                  "Action": Array [
                    "kms:GenerateDataKey*",
                    "kms:Decrypt",
                  ],
                  "Condition": Object {
                    "StringEquals": Object {
                      "kms:ViaService": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "sns.",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ".amazonaws.com",
                          ],
                        ],
                      },
                    },
                  },
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "codestar-notifications.amazonaws.com",
                  },
                  "Resource": "*",
                  "Sid": "KMS key access to codestar-notifications",
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "InstallerKeyAliasD5C174F0": Object {
      "Properties": Object {
        "AliasName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "alias/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/installer/kms/key",
            ],
          ],
        },
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstallerProject879FF821": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-CB3",
              "reason": "Project requires access to the Docker daemon.",
            },
          ],
        },
      },
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_MEDIUM",
          "EnvironmentVariables": Array [
            Object {
              "Name": "NODE_OPTIONS",
              "Type": "PLAINTEXT",
              "Value": "--max_old_space_size=4096",
            },
            Object {
              "Name": "CDK_NEW_BOOTSTRAP",
              "Type": "PLAINTEXT",
              "Value": "1",
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_SOURCE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositorySource",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_OWNER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryOwner",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryName",
              },
            },
            Object {
              "Name": "ACCELERATOR_REPOSITORY_BRANCH_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "RepositoryBranchName",
              },
            },
            Object {
              "Name": "ACCELERATOR_ENABLE_APPROVAL_STAGE",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "EnableApprovalStage",
              },
            },
            Object {
              "Name": "APPROVAL_STAGE_NOTIFY_EMAIL_LIST",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Fn::Join": Array [
                  ",",
                  Object {
                    "Ref": "ApprovalStageNotifyEmailList",
                  },
                ],
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountEmail",
              },
            },
            Object {
              "Name": "LOG_ARCHIVE_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "LogArchiveAccountEmail",
              },
            },
            Object {
              "Name": "AUDIT_ACCOUNT_EMAIL",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AuditAccountEmail",
              },
            },
            Object {
              "Name": "CONTROL_TOWER_ENABLED",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ControlTowerEnabled",
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountId",
              },
            },
            Object {
              "Name": "MANAGEMENT_ACCOUNT_ROLE_NAME",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "ManagementAccountRoleName",
              },
            },
            Object {
              "Name": "ACCELERATOR_QUALIFIER",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Ref": "AcceleratorQualifier",
              },
            },
          ],
          "Image": "aws/codebuild/standard:5.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer-project",
            ],
          ],
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "InstallerAdminRole7DEE4AC8",
            "Arn",
          ],
        },
        "Source": Object {
          "BuildSpec": Object {
            "Fn::Join": Array [
              "",
              Array [
                "version: \\"0.2\\"
phases:
  install:
    runtime-versions:
      nodejs: 14
  pre_build:
    commands:
      - ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"no\\"
      - if [ ! -z \\"$MANAGEMENT_ACCOUNT_ID\\" ] && [ ! -z \\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" ]; then ENABLE_EXTERNAL_PIPELINE_ACCOUNT=\\"yes\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then BOOTSTRAPPED_HOME=\\"no\\"; fi
      - if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then BOOTSTRAPPED_GLOBAL=\\"no\\"; fi
  build:
    commands:
      - cd source
      - |-
        if [ \\"",
                Object {
                  "Ref": "AWS::Partition",
                },
                "\\" = \\"aws-cn\\" ]; then
                          sed -i \\"s#registry.yarnpkg.com#registry.npmmirror.com#g\\" yarn.lock;
                          yarn config set registry https://registry.npmmirror.com
                       fi
      - yarn install
      - yarn lerna link
      - yarn build
      - cd packages/@aws-accelerator/installer
      - if [ \\"$BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi
      - if [ \\"$BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi
      - |-
        if [ $ENABLE_EXTERNAL_PIPELINE_ACCOUNT = \\"yes\\" ]; then
                          export $(printf \\"AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s\\" $(aws sts assume-role --role-arn arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::\\"$MANAGEMENT_ACCOUNT_ID\\":role/\\"$MANAGEMENT_ACCOUNT_ROLE_NAME\\" --role-session-name acceleratorAssumeRoleSession --query \\"Credentials.[AccessKeyId,SecretAccessKey,SessionToken]\\" --output text));
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; then MGMT_BOOTSTRAPPED_HOME=\\"no\\"; fi;
                          if ! aws cloudformation describe-stacks --stack-name AWSAccelerator-CDKToolkit --region ",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                "; then MGMT_BOOTSTRAPPED_GLOBAL=\\"no\\"; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_HOME\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Ref": "AWS::Region",
                },
                " --qualifier accel; fi;
                          if [ \\"$MGMT_BOOTSTRAPPED_GLOBAL\\" = \\"no\\" ]; then yarn run cdk bootstrap --toolkitStackName AWSAccelerator-CDKToolkit aws://$MANAGEMENT_ACCOUNT_ID/",
                Object {
                  "Fn::FindInMap": Array [
                    "GlobalRegionMap",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    "regionName",
                  ],
                },
                " --qualifier accel; fi;
                          unset AWS_ACCESS_KEY_ID;
                          unset AWS_SECRET_ACCESS_KEY;
                          unset AWS_SESSION_TOKEN;
                       fi
      - cd ../accelerator
      - yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --partition ",
                Object {
                  "Ref": "AWS::Partition",
                },
                "
      - if [ \\"$ENABLE_TESTER\\" = \\"true\\" ]; then yarn run ts-node --transpile-only cdk.ts deploy --require-approval never --stage tester-pipeline --account ",
                Object {
                  "Ref": "AWS::AccountId",
                },
                " --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                "; fi
  post_build:
    commands:
      - \\"inprogress_status_count=$(aws codepipeline get-pipeline-state --name \\\\\\"",
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-pipeline\\\\\\" | grep '\\\\\\"status\\\\\\": \\\\\\"InProgress\\\\\\"' | grep -v grep | wc -l)\\"
      - |-
        if [ $inprogress_status_count -eq 0 ]; then
                        aws codepipeline start-pipeline-execution --name \\"",
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-pipeline\\";
                        fi
",
              ],
            ],
          },
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "SecureBucket747CD8C0": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "InstallerKey2A6A8C6D",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "-installer-",
              Object {
                "Ref": "AWS::AccountId",
              },
              "-",
              Object {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "ExpirationInDays": 1825,
              "ExpiredObjectDeleteMarker": false,
              "Id": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "LifecycleRule",
                    Object {
                      "Ref": "AcceleratorQualifier",
                    },
                    "-installer-",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "-",
                    Object {
                      "Ref": "AWS::Region",
                    },
                  ],
                ],
              },
              "NoncurrentVersionExpiration": Object {
                "NoncurrentDays": 1825,
              },
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 366,
                },
              ],
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "DEEP_ARCHIVE",
                  "TransitionInDays": 365,
                },
              ],
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "InstallerAccessLogsBucket647700E9",
          },
          "LogFilePrefix": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AcceleratorQualifier",
                },
                "-installer-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                "-",
                Object {
                  "Ref": "AWS::Region",
                },
                "/",
              ],
            ],
          },
        },
        "OwnershipControls": Object {
          "Rules": Array [
            Object {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SecureBucketPolicy6374AC61": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "SecureBucket747CD8C0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SecureBucket747CD8C0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SecureBucket747CD8C0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
              "Sid": "deny-insecure-connections",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "SolutionHelper4825923B": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DependsOn": Array [
        "SolutionHelperServiceRoleF70C0E2A",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "
        const AWS = require('aws-sdk');
        const response = require('cfn-response');
        const https = require('https');

        async function post(url, data) {
          const dataString = JSON.stringify(data)
          const options = {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              timeout: 1000, // in ms
          }
          
          return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                  if (res.statusCode < 200 || res.statusCode > 299) {
                      return reject(new Error('HTTP status code: ', res.statusCode))
                  }
                  const body = []
                  res.on('data', (chunk) => body.push(chunk))
                  res.on('end', () => {
                      const resString = Buffer.concat(body).toString()
                      resolve(resString)
                  })
              })
              req.on('error', (err) => {
                  reject(err)
              })
              req.on('timeout', () => {
                  req.destroy()
                  reject(new Error('Request time out'))
              })
              req.write(dataString)
              req.end()
          })
        }

        function uuidv4() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
          });
        }


        function sanitizeData(resourceProperties) {
          const keysToExclude = ['ServiceToken', 'Resource', 'SolutionId', 'UUID'];
          return Object.keys(resourceProperties).reduce((sanitizedData, key) => {
              if (!keysToExclude.includes(key)) {
                  sanitizedData[key] = resourceProperties[key];
              }
              return sanitizedData;
          }, {})
        }

        exports.handler = async function (event, context) {
          console.log(JSON.stringify(event, null, 4));
          const requestType = event.RequestType;
          const resourceProperties = event.ResourceProperties;
          const resource = resourceProperties.Resource;
          let data = {};
          try {
              if (resource === 'UUID' && requestType === 'Create') {
                  data['UUID'] = uuidv4();
              }
              if (resource === 'AnonymousMetric') {
                  const currentDate = new Date()
                  data = sanitizeData(resourceProperties);
                  data['RequestType'] = requestType;
                  const payload = {
                      Solution: resourceProperties.SolutionId,
                      UUID: resourceProperties.UUID,
                      TimeStamp: currentDate.toISOString(),
                      Data: data
                  }

                  console.log('Sending metrics data: ', JSON.stringify(payload, null, 2));
                  await post('https://metrics.awssolutionsbuilder.com/generic', payload);
                  console.log('Sent Data');
              }
          } catch (error) {
              console.log(error);
          }
      
          if (requestType === 'Create') {
            await response.send(event, context, response.SUCCESS, data);
          }
          else {
            await response.send(event, context, response.SUCCESS, data, event.PhysicalResourceId);
          }
          return;
        } 
      ",
        },
        "Description": "This function generates UUID for each deployment and sends anonymous data to the AWS Solutions team",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperServiceRoleF70C0E2A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperServiceRoleF70C0E2A": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Needed to write to CWL group",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SolutionHelperSolutionCreateUniqueID070ED802": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Resource": "UUID",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CreateUUID",
      "UpdateReplacePolicy": "Delete",
    },
    "SolutionHelperSolutionSendAnonymousData271B3D26": Object {
      "Condition": "SolutionHelperAnonymousDataToAWS62E4FDE2",
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BranchName": Object {
          "Ref": "RepositoryBranchName",
        },
        "Region": Object {
          "Ref": "AWS::Region",
        },
        "RepositoryName": Object {
          "Ref": "RepositoryName",
        },
        "RepositoryOwner": Object {
          "Ref": "RepositoryOwner",
        },
        "RepositorySource": Object {
          "Ref": "RepositorySource",
        },
        "Resource": "AnonymousMetric",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SolutionHelper4825923B",
            "Arn",
          ],
        },
        "SolutionId": "SO0199",
        "UUID": Object {
          "Fn::GetAtt": Array [
            "SolutionHelperSolutionCreateUniqueID070ED802",
            "UUID",
          ],
        },
      },
      "Type": "Custom::AnonymousData",
      "UpdateReplacePolicy": "Delete",
    },
    "SsmParamAcceleratorVersionFF83282D": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/AWSAccelerator-Test-InstallerStack/version",
            ],
          ],
        },
        "Type": "String",
        "Value": "1.3.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SsmParamStackId521A78D3": Object {
      "Properties": Object {
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/accelerator/",
              Object {
                "Ref": "AcceleratorQualifier",
              },
              "/AWSAccelerator-Test-InstallerStack/stack-id",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "AWS::StackId",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "UpdatePipelineGithubTokenFunction29B64F2E": Object {
      "Condition": "UseGitHubCondition",
      "DependsOn": Array [
        "UpdatePipelineLambdaRole88CE0535",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the \\"License\\"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

const AWS = require('aws-sdk');

const secretsManager = new AWS.SecretsManager({});
const codePipeline = new AWS.CodePipeline({});
const installerPipelineName = process.env['INSTALLER_PIPELINE_NAME'] ?? '';
const acceleratorPipelineName = process.env['ACCELERATOR_PIPELINE_NAME'] ?? '';
const pipelineArray = [installerPipelineName, acceleratorPipelineName];

/**
 * update-pipeline-github-token - lambda handler
 *
 * @param event
 * @returns
 */

exports.handler = async (event, context) => {
  const secretDetails = event.detail.requestParameters;
  const secretArn = secretDetails.secretId;
  const secretValue = await getSecretValue(secretArn);
  await updatePipelineDetailsForBothPipelines(secretValue);
  return {
    statusCode: 200,
  };
};

async function getSecretValue(secretName) {
  try {
    const data = await secretsManager
      .getSecretValue({
        SecretId: secretName,
      })
      .promise();

    if (!data || !data.SecretString) {
      throw new Error(\`Secret \${secretName} didn't exist.\`);
    }
    console.log(\`Retrieved secret: \${secretName}...\`);
    return data.SecretString;
  } catch (error) {
    console.log(error);
    throw new Error(\`Error retrieving secret: \${secretName}.\`);
  }
}

async function updateCodePipelineSourceStage(pipelineDetails, secretValue) {
  const pipelineStages = pipelineDetails.pipeline.stages;
  const sourceStage = pipelineStages.find(o => o.name == 'Source');
  const sourceAction = sourceStage.actions.find(a => a.name == 'Source');
  if (sourceAction.provider != 'GitHub') {
    console.log('Pipeline source is not GitHub, no action will be taken.');
    return;
  }
  sourceAction.configuration.OAuthToken = secretValue;

  return pipelineDetails;
}

async function getPipelineDetails(pipelineName) {
  //This function retrieves the original Code Pipeline structure, so we can update it.
  const getPipelineParams = {
    name: pipelineName,
  };
  console.log(\`Retrieving existing pipeline configuration for: \${pipelineName}...\`);
  const pipelineObject = await codePipeline.getPipeline(getPipelineParams).promise();
  console.log(JSON.stringify(pipelineObject));
  return pipelineObject;
}

async function updatePipeline(updatedPipelineDetails) {
  //Remove metadata from getPipelineOutput to use as updatePipelineInput
  delete updatedPipelineDetails.metadata;
  console.log(\`Updating pipeline with new OAuth Token...\`);
  return codePipeline.updatePipeline(updatedPipelineDetails).promise();
}

async function updatePipelineDetailsForBothPipelines(secretValue) {
  for (const pipeline of pipelineArray) {
    try {
      const pipelineDetails = await getPipelineDetails(pipeline);
      const updatedPipelineDetails = await updateCodePipelineSourceStage(pipelineDetails, secretValue);
      if (updatedPipelineDetails) {
        await updatePipeline(updatedPipelineDetails);
      }
    } catch (error) {
      console.error(error);
      throw new Error(\`Error occurred while updating pipeline \${pipeline}\`);
    }
  }
}
",
        },
        "Description": "Lambda function to update CodePipeline OAuth Token",
        "Environment": Object {
          "Variables": Object {
            "ACCELERATOR_PIPELINE_NAME": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AcceleratorQualifier",
                  },
                  "-pipeline",
                ],
              ],
            },
            "INSTALLER_PIPELINE_NAME": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AcceleratorQualifier",
                  },
                  "-installer",
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "KmsKeyArn": Object {
          "Fn::GetAtt": Array [
            "InstallerKey2A6A8C6D",
            "Arn",
          ],
        },
        "Role": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineLambdaRole88CE0535",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "UpdatePipelineGithubTokenFunctionLogGroupFCE3723A": Object {
      "Condition": "UseGitHubCondition",
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W84",
              "reason": "CloudWatchLogs LogGroup should specify a KMS Key Id to encrypt the log data",
            },
          ],
        },
      },
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "UpdatePipelineGithubTokenFunction29B64F2E",
              },
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "UpdatePipelineGithubTokenRule79D83132": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Description": "Rule to trigger Lambda Function when the Github Accelerator Token has been updated.",
        "EventPattern": Object {
          "detail": Object {
            "eventName": Array [
              "UpdateSecret",
              "PutSecretValue",
            ],
            "eventSource": Array [
              "secretsmanager.amazonaws.com",
            ],
            "requestParameters": Object {
              "secretId": Array [
                Object {
                  "prefix": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:accelerator/github-token",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": Array [
            "AWS API Call via CloudTrail",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "UpdatePipelineGithubTokenFunction29B64F2E",
                "Arn",
              ],
            },
            "Id": "Target0",
            "RetryPolicy": Object {
              "MaximumEventAgeInSeconds": 14400,
              "MaximumRetryAttempts": 2,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UpdatePipelineGithubTokenRuleAllowEventRuleAWSAcceleratorTestInstallerStackUpdatePipelineGithubTokenFunction78C173C279CEF0A3": Object {
      "Condition": "UseGitHubCondition",
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenFunction29B64F2E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "UpdatePipelineGithubTokenRule79D83132",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UpdatePipelineLambdaPolicy284ABC36": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "IAM role requires wildcard permissions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "IAM policy should not allow * resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codepipeline:GetPipeline",
                "codepipeline:UpdatePipeline",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-installer*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":codepipeline:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-pipeline*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:accelerator/github-token*",
                  ],
                ],
              },
            },
            Object {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":role/",
                      Object {
                        "Ref": "AcceleratorQualifier",
                      },
                      "-*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "GitHubPipelineRole6F4DEF1B",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UpdatePipelineLambdaPolicy284ABC36",
        "Roles": Array [
          Object {
            "Ref": "UpdatePipelineLambdaRole88CE0535",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UpdatePipelineLambdaRole88CE0535": Object {
      "Condition": "UseGitHubCondition",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies required for IAM role.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
