// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GovCloudAccountVendingStack Stack(GovCloudAccountVendingStack):  Snapshot Test 1`] = `
Object {
  "Resources": Object {
    "GovCloudAccountVendingFunctionB10FB00E": Object {
      "DependsOn": Array [
        "GovCloudAccountVendingFunctionServiceRoleDefaultPolicy02E0FF6C",
        "GovCloudAccountVendingFunctionServiceRole3F1EF782",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "CloudWatch Logs are enabled in AWSLambdaBasicExecutionRole",
            },
            Object {
              "id": "W89",
              "reason": "This function supports infrastructure deployment and is not deployed inside a VPC.",
            },
            Object {
              "id": "W92",
              "reason": "This function supports infrastructure deployment and does not require setting ReservedConcurrentExecutions.",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "ZipFile": "/**
 *  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the \\"License\\"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

const aws = require('aws-sdk');
const org = new aws.Organizations({ region: 'us-east-1' });
const cfn = require('cfn-response');
/**
 * create-govcloud-account - lambda handler
 *
 * @param event
 * @returns cfn-response
 */

exports.handler = async (event, context) => {
  console.log('Received event:\\\\n' + JSON.stringify(event, null, 2));
  try {
    var acc = event.ResourceProperties.accountName;
    var em = event.ResourceProperties.emailAddress;
    var role = event.ResourceProperties.orgAccessRole;
    let i = 0;

    if (event.RequestType === 'Create') {
      var accResp = await org.createGovCloudAccount({ AccountName: acc, Email: em, RoleName: role }).promise();
      console.log(JSON.stringify(accResp));
      var car = accResp.CreateAccountStatus.Id;
      let accStatR = await org.describeCreateAccountStatus({ CreateAccountRequestId: car }).promise();
      let accStat = accStatR.CreateAccountStatus.State;
      while (accStat === 'IN_PROGRESS' && i < 40) {
        await new Promise(resolve => setTimeout(resolve, 15e3));
        accStatR = await org.describeCreateAccountStatus({ CreateAccountRequestId: car }).promise();
        accStat = accStatR.CreateAccountStatus.State;
        i++;
        // print responses to help troubleshoot
        console.log(\`Attempt: \${i} of 40\`);
        console.log(JSON.stringify(accStatR));
        console.log(accStat);
      }
      if (i === 40) {
        console.log('Timed out');
        return await cfn.send(event, context, 'FAILED');
      } else if (accStat === 'FAILED') {
        var physicalResourceId = accStatR.CreateAccountStatus.FailureReason;
        return await cfn.send(event, context, 'FAILED', physicalResourceId);
      } else if (accStat === 'SUCCEEDED') {
        var responseData = {
          AccountId: accStatR.CreateAccountStatus.AccountId,
          GovCloudAccountId: accStatR.CreateAccountStatus.GovCloudAccountId,
        };
        return await cfn.send(event, context, 'SUCCESS', responseData);
      }
    } else if (event.RequestType === 'Delete' || event.RequestType === 'Update') {
      return await cfn.send(event, context, 'SUCCESS');
    }
  } catch (err) {
    let errMsg = \`\${err.name}:\\\\n\${err.message}\`;
    let responseData = { Error: errMsg };
    console.log(errMsg);

    return await cfn.send(event, context, 'FAILED', responseData);
  }
};
",
        },
        "Description": "Create AWS GovCloud (US) Accounts",
        "FunctionName": "AWSAccelerator-GovCloudAccountVending",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "GovCloudAccountVendingFunctionServiceRole3F1EF782",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "GovCloudAccountVendingFunctionServiceRole3F1EF782": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GovCloudAccountVendingFunctionServiceRoleDefaultPolicy02E0FF6C": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "IAM policy should not allow * resource.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "organizations:CreateGovCloudAccount",
                "organizations:DescribeCreateAccountStatus",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GovCloudAccountVendingFunctionServiceRoleDefaultPolicy02E0FF6C",
        "Roles": Array [
          Object {
            "Ref": "GovCloudAccountVendingFunctionServiceRole3F1EF782",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GovCloudAccountVendingPortfolioEB3BE033": Object {
      "Properties": Object {
        "DisplayName": "Landing Zone Accelerator on AWS",
        "ProviderName": "AWS Solutions",
      },
      "Type": "AWS::ServiceCatalog::Portfolio",
    },
    "GovCloudAccountVendingPortfolioPortfolioProductAssociationf14ebeee1f152D65EDA3": Object {
      "Properties": Object {
        "PortfolioId": Object {
          "Ref": "GovCloudAccountVendingPortfolioEB3BE033",
        },
        "ProductId": Object {
          "Ref": "GovCloudAccountVendingProduct2B8769D5",
        },
      },
      "Type": "AWS::ServiceCatalog::PortfolioProductAssociation",
    },
    "GovCloudAccountVendingProduct2B8769D5": Object {
      "Properties": Object {
        "Name": "Landing Zone Accelerator on AWS - AWS GovCloud (US) Account Vending",
        "Owner": "AWS Solutions",
        "ProvisioningArtifactParameters": Array [
          Object {
            "Description": "AWS GovCloud (US) Account Vending Product. Create AWS GovCloud (US) accounts. Required inputs are Account name, email and Organization Access Role.",
            "DisableTemplateValidation": false,
            "Info": Object {
              "LoadTemplateFromURL": Object {
                "Fn::Sub": "REPLACED-JSON-PATH.json",
              },
            },
            "Name": "v1.0.0",
          },
        ],
      },
      "Type": "AWS::ServiceCatalog::CloudFormationProduct",
    },
  },
}
`;
